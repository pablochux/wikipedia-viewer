//------------------------------
// Default styles
//------------------------------
body{
	// background-color: $main-bg-color;
	// color: $main-text-color;
	// font-family: 'Roboto-Regular';
}

//------------------------------
// Variables
//------------------------------
.u-clear-fix{
	clear: both;
}

.u-hide{
	display: none;
}

.u-block{
	display: block;
}

.u-center{
	text-align: center;
}

.u-margin-center{
	margin: 0 auto;
}

.u-absolute-center{
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;

	margin: auto;
}

.u-full-width{
	width: 100%;
}
//------------------------------
// Colour Variables
//------------------------------
$default-text-color: #FFF;
// $main-bg-color: ;
$default-search: #0082CA;
$default-search-lighten: lighten($default-search, 10%);
$default-random-quote: #D50058;
$default-random-quote-lighten: lighten($default-random-quote, 10%);
//------------------------------
// URLS Variables
//------------------------------
$img: '../img';


// Mixins
/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}
